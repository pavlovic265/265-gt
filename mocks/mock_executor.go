// Code generated by MockGen. DO NOT EDIT.
// Source: executor/executor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	executor "github.com/pavlovic265/265-gt/executor"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockExecutor) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockExecutorMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockExecutor)(nil).Run))
}

// RunSilent mocks base method.
func (m *MockExecutor) RunSilent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSilent")
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSilent indicates an expected call of RunSilent.
func (mr *MockExecutorMockRecorder) RunSilent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSilent", reflect.TypeOf((*MockExecutor)(nil).RunSilent))
}

// RunWithOutput mocks base method.
func (m *MockExecutor) RunWithOutput() (bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithOutput")
	ret0, _ := ret[0].(bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWithOutput indicates an expected call of RunWithOutput.
func (mr *MockExecutorMockRecorder) RunWithOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithOutput", reflect.TypeOf((*MockExecutor)(nil).RunWithOutput))
}

// WithArgs mocks base method.
func (m *MockExecutor) WithArgs(args []string) executor.Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithArgs", args)
	ret0, _ := ret[0].(executor.Executor)
	return ret0
}

// WithArgs indicates an expected call of WithArgs.
func (mr *MockExecutorMockRecorder) WithArgs(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithArgs", reflect.TypeOf((*MockExecutor)(nil).WithArgs), args)
}

// WithGh mocks base method.
func (m *MockExecutor) WithGh() executor.Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithGh")
	ret0, _ := ret[0].(executor.Executor)
	return ret0
}

// WithGh indicates an expected call of WithGh.
func (mr *MockExecutorMockRecorder) WithGh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithGh", reflect.TypeOf((*MockExecutor)(nil).WithGh))
}

// WithGit mocks base method.
func (m *MockExecutor) WithGit() executor.Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithGit")
	ret0, _ := ret[0].(executor.Executor)
	return ret0
}

// WithGit indicates an expected call of WithGit.
func (mr *MockExecutorMockRecorder) WithGit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithGit", reflect.TypeOf((*MockExecutor)(nil).WithGit))
}

// WithName mocks base method.
func (m *MockExecutor) WithName(name string) executor.Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", name)
	ret0, _ := ret[0].(executor.Executor)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockExecutorMockRecorder) WithName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockExecutor)(nil).WithName), name)
}

// WithStdin mocks base method.
func (m *MockExecutor) WithStdin(stdin string) executor.Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStdin", stdin)
	ret0, _ := ret[0].(executor.Executor)
	return ret0
}

// WithStdin indicates an expected call of WithStdin.
func (mr *MockExecutorMockRecorder) WithStdin(stdin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStdin", reflect.TypeOf((*MockExecutor)(nil).WithStdin), stdin)
}
