// Code generated by MockGen. DO NOT EDIT.
// Source: config/config.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/pavlovic265/265-gt/config"
)

// MockConfigManager is a mock of ConfigManager interface.
type MockConfigManager struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagerMockRecorder
}

// MockConfigManagerMockRecorder is the mock recorder for MockConfigManager.
type MockConfigManagerMockRecorder struct {
	mock *MockConfigManager
}

// NewMockConfigManager creates a new mock instance.
func NewMockConfigManager(ctrl *gomock.Controller) *MockConfigManager {
	mock := &MockConfigManager{ctrl: ctrl}
	mock.recorder = &MockConfigManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManager) EXPECT() *MockConfigManagerMockRecorder {
	return m.recorder
}

// ClearActiveAccount mocks base method.
func (m *MockConfigManager) ClearActiveAccount() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearActiveAccount")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearActiveAccount indicates an expected call of ClearActiveAccount.
func (mr *MockConfigManagerMockRecorder) ClearActiveAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearActiveAccount", reflect.TypeOf((*MockConfigManager)(nil).ClearActiveAccount))
}

// GetAccounts mocks base method.
func (m *MockConfigManager) GetAccounts() []config.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts")
	ret0, _ := ret[0].([]config.Account)
	return ret0
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockConfigManagerMockRecorder) GetAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockConfigManager)(nil).GetAccounts))
}

// GetActiveAccount mocks base method.
func (m *MockConfigManager) GetActiveAccount() config.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveAccount")
	ret0, _ := ret[0].(config.Account)
	return ret0
}

// GetActiveAccount indicates an expected call of GetActiveAccount.
func (mr *MockConfigManagerMockRecorder) GetActiveAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveAccount", reflect.TypeOf((*MockConfigManager)(nil).GetActiveAccount))
}

// GetCurrentVersion mocks base method.
func (m *MockConfigManager) GetCurrentVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentVersion indicates an expected call of GetCurrentVersion.
func (mr *MockConfigManagerMockRecorder) GetCurrentVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVersion", reflect.TypeOf((*MockConfigManager)(nil).GetCurrentVersion))
}

// GetGlobalConfigPath mocks base method.
func (m *MockConfigManager) GetGlobalConfigPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalConfigPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalConfigPath indicates an expected call of GetGlobalConfigPath.
func (mr *MockConfigManagerMockRecorder) GetGlobalConfigPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalConfigPath", reflect.TypeOf((*MockConfigManager)(nil).GetGlobalConfigPath))
}

// GetProtectedBranches mocks base method.
func (m *MockConfigManager) GetProtectedBranches() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtectedBranches")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetProtectedBranches indicates an expected call of GetProtectedBranches.
func (mr *MockConfigManagerMockRecorder) GetProtectedBranches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectedBranches", reflect.TypeOf((*MockConfigManager)(nil).GetProtectedBranches))
}

// GetVersion mocks base method.
func (m *MockConfigManager) GetVersion() config.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(config.Version)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockConfigManagerMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockConfigManager)(nil).GetVersion))
}

// HasActiveAccount mocks base method.
func (m *MockConfigManager) HasActiveAccount() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasActiveAccount")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasActiveAccount indicates an expected call of HasActiveAccount.
func (mr *MockConfigManagerMockRecorder) HasActiveAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasActiveAccount", reflect.TypeOf((*MockConfigManager)(nil).HasActiveAccount))
}

// InitConfig mocks base method.
func (m *MockConfigManager) InitConfig(loadLocal bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitConfig", loadLocal)
}

// InitConfig indicates an expected call of InitConfig.
func (mr *MockConfigManagerMockRecorder) InitConfig(loadLocal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitConfig", reflect.TypeOf((*MockConfigManager)(nil).InitConfig), loadLocal)
}

// LoadGlobalConfig mocks base method.
func (m *MockConfigManager) LoadGlobalConfig() (*config.GlobalConfigStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadGlobalConfig")
	ret0, _ := ret[0].(*config.GlobalConfigStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadGlobalConfig indicates an expected call of LoadGlobalConfig.
func (mr *MockConfigManagerMockRecorder) LoadGlobalConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadGlobalConfig", reflect.TypeOf((*MockConfigManager)(nil).LoadGlobalConfig))
}

// LoadLocalConfig mocks base method.
func (m *MockConfigManager) LoadLocalConfig() (*config.LocalConfigStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadLocalConfig")
	ret0, _ := ret[0].(*config.LocalConfigStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadLocalConfig indicates an expected call of LoadLocalConfig.
func (mr *MockConfigManagerMockRecorder) LoadLocalConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadLocalConfig", reflect.TypeOf((*MockConfigManager)(nil).LoadLocalConfig))
}

// SaveActiveAccount mocks base method.
func (m *MockConfigManager) SaveActiveAccount(account config.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveActiveAccount", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveActiveAccount indicates an expected call of SaveActiveAccount.
func (mr *MockConfigManagerMockRecorder) SaveActiveAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveActiveAccount", reflect.TypeOf((*MockConfigManager)(nil).SaveActiveAccount), account)
}

// SaveGlobalConfig mocks base method.
func (m *MockConfigManager) SaveGlobalConfig(configToSave config.GlobalConfigStruct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGlobalConfig", configToSave)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGlobalConfig indicates an expected call of SaveGlobalConfig.
func (mr *MockConfigManagerMockRecorder) SaveGlobalConfig(configToSave interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGlobalConfig", reflect.TypeOf((*MockConfigManager)(nil).SaveGlobalConfig), configToSave)
}

// SaveLastChecked mocks base method.
func (m *MockConfigManager) SaveLastChecked() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLastChecked")
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLastChecked indicates an expected call of SaveLastChecked.
func (mr *MockConfigManagerMockRecorder) SaveLastChecked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLastChecked", reflect.TypeOf((*MockConfigManager)(nil).SaveLastChecked))
}

// SaveLocalConfig mocks base method.
func (m *MockConfigManager) SaveLocalConfig(configToSave config.LocalConfigStruct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLocalConfig", configToSave)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLocalConfig indicates an expected call of SaveLocalConfig.
func (mr *MockConfigManagerMockRecorder) SaveLocalConfig(configToSave interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLocalConfig", reflect.TypeOf((*MockConfigManager)(nil).SaveLocalConfig), configToSave)
}

// SaveProtectedBranches mocks base method.
func (m *MockConfigManager) SaveProtectedBranches(branches []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProtectedBranches", branches)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProtectedBranches indicates an expected call of SaveProtectedBranches.
func (mr *MockConfigManagerMockRecorder) SaveProtectedBranches(branches interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProtectedBranches", reflect.TypeOf((*MockConfigManager)(nil).SaveProtectedBranches), branches)
}

// SaveVersion mocks base method.
func (m *MockConfigManager) SaveVersion(version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVersion", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVersion indicates an expected call of SaveVersion.
func (mr *MockConfigManagerMockRecorder) SaveVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVersion", reflect.TypeOf((*MockConfigManager)(nil).SaveVersion), version)
}

// SetActiveAccount mocks base method.
func (m *MockConfigManager) SetActiveAccount(account config.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActiveAccount", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActiveAccount indicates an expected call of SetActiveAccount.
func (mr *MockConfigManagerMockRecorder) SetActiveAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveAccount", reflect.TypeOf((*MockConfigManager)(nil).SetActiveAccount), account)
}
