// Code generated by MockGen. DO NOT EDIT.
// Source: helpers/git_helper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGitHelper is a mock of GitHelper interface.
type MockGitHelper struct {
	ctrl     *gomock.Controller
	recorder *MockGitHelperMockRecorder
}

// MockGitHelperMockRecorder is the mock recorder for MockGitHelper.
type MockGitHelperMockRecorder struct {
	mock *MockGitHelper
}

// NewMockGitHelper creates a new mock instance.
func NewMockGitHelper(ctrl *gomock.Controller) *MockGitHelper {
	mock := &MockGitHelper{ctrl: ctrl}
	mock.recorder = &MockGitHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHelper) EXPECT() *MockGitHelperMockRecorder {
	return m.recorder
}

// CheckGTVersion mocks base method.
func (m *MockGitHelper) CheckGTVersion() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckGTVersion")
}

// CheckGTVersion indicates an expected call of CheckGTVersion.
func (mr *MockGitHelperMockRecorder) CheckGTVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGTVersion", reflect.TypeOf((*MockGitHelper)(nil).CheckGTVersion))
}

// DeleteParent mocks base method.
func (m *MockGitHelper) DeleteParent(branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteParent", branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteParent indicates an expected call of DeleteParent.
func (mr *MockGitHelperMockRecorder) DeleteParent(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParent", reflect.TypeOf((*MockGitHelper)(nil).DeleteParent), branch)
}

// EnsureGitRepository mocks base method.
func (m *MockGitHelper) EnsureGitRepository() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureGitRepository")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureGitRepository indicates an expected call of EnsureGitRepository.
func (mr *MockGitHelperMockRecorder) EnsureGitRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureGitRepository", reflect.TypeOf((*MockGitHelper)(nil).EnsureGitRepository))
}

// GetBranches mocks base method.
func (m *MockGitHelper) GetBranches() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranches")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranches indicates an expected call of GetBranches.
func (mr *MockGitHelperMockRecorder) GetBranches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranches", reflect.TypeOf((*MockGitHelper)(nil).GetBranches))
}

// GetChildren mocks base method.
func (m *MockGitHelper) GetChildren(branch string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildren", branch)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetChildren indicates an expected call of GetChildren.
func (mr *MockGitHelperMockRecorder) GetChildren(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildren", reflect.TypeOf((*MockGitHelper)(nil).GetChildren), branch)
}

// GetCurrentBranchName mocks base method.
func (m *MockGitHelper) GetCurrentBranchName() (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBranchName")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBranchName indicates an expected call of GetCurrentBranchName.
func (mr *MockGitHelperMockRecorder) GetCurrentBranchName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBranchName", reflect.TypeOf((*MockGitHelper)(nil).GetCurrentBranchName))
}

// GetGitRoot mocks base method.
func (m *MockGitHelper) GetGitRoot() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRoot")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRoot indicates an expected call of GetGitRoot.
func (mr *MockGitHelperMockRecorder) GetGitRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRoot", reflect.TypeOf((*MockGitHelper)(nil).GetGitRoot))
}

// GetParent mocks base method.
func (m *MockGitHelper) GetParent(branch string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParent", branch)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetParent indicates an expected call of GetParent.
func (mr *MockGitHelperMockRecorder) GetParent(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParent", reflect.TypeOf((*MockGitHelper)(nil).GetParent), branch)
}

// IsGitRepository mocks base method.
func (m *MockGitHelper) IsGitRepository() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGitRepository")
	ret0, _ := ret[0].(error)
	return ret0
}

// IsGitRepository indicates an expected call of IsGitRepository.
func (mr *MockGitHelperMockRecorder) IsGitRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGitRepository", reflect.TypeOf((*MockGitHelper)(nil).IsGitRepository))
}

// IsProtectedBranch mocks base method.
func (m *MockGitHelper) IsProtectedBranch(branch string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProtectedBranch", branch)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProtectedBranch indicates an expected call of IsProtectedBranch.
func (mr *MockGitHelperMockRecorder) IsProtectedBranch(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProtectedBranch", reflect.TypeOf((*MockGitHelper)(nil).IsProtectedBranch), branch)
}

// RebaseBranch mocks base method.
func (m *MockGitHelper) RebaseBranch(branch, parent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebaseBranch", branch, parent)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebaseBranch indicates an expected call of RebaseBranch.
func (mr *MockGitHelperMockRecorder) RebaseBranch(branch, parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebaseBranch", reflect.TypeOf((*MockGitHelper)(nil).RebaseBranch), branch, parent)
}

// RelinkParentChildren mocks base method.
func (m *MockGitHelper) RelinkParentChildren(parent string, branchChildren []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelinkParentChildren", parent, branchChildren)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelinkParentChildren indicates an expected call of RelinkParentChildren.
func (mr *MockGitHelperMockRecorder) RelinkParentChildren(parent, branchChildren interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelinkParentChildren", reflect.TypeOf((*MockGitHelper)(nil).RelinkParentChildren), parent, branchChildren)
}

// SetParent mocks base method.
func (m *MockGitHelper) SetParent(parent, child string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetParent", parent, child)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetParent indicates an expected call of SetParent.
func (mr *MockGitHelperMockRecorder) SetParent(parent, child interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParent", reflect.TypeOf((*MockGitHelper)(nil).SetParent), parent, child)
}
