// Code generated by MockGen. DO NOT EDIT.
// Source: helpers/git_helper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	executor "github.com/pavlovic265/265-gt/executor"
)

// MockGitHelper is a mock of GitHelper interface.
type MockGitHelper struct {
	ctrl     *gomock.Controller
	recorder *MockGitHelperMockRecorder
}

// MockGitHelperMockRecorder is the mock recorder for MockGitHelper.
type MockGitHelperMockRecorder struct {
	mock *MockGitHelper
}

// NewMockGitHelper creates a new mock instance.
func NewMockGitHelper(ctrl *gomock.Controller) *MockGitHelper {
	mock := &MockGitHelper{ctrl: ctrl}
	mock.recorder = &MockGitHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHelper) EXPECT() *MockGitHelperMockRecorder {
	return m.recorder
}

// DeleteChildren mocks base method.
func (m *MockGitHelper) DeleteChildren(exe executor.Executor, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChildren", exe, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChildren indicates an expected call of DeleteChildren.
func (mr *MockGitHelperMockRecorder) DeleteChildren(exe, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChildren", reflect.TypeOf((*MockGitHelper)(nil).DeleteChildren), exe, branch)
}

// DeleteFromParentChildren mocks base method.
func (m *MockGitHelper) DeleteFromParentChildren(exe executor.Executor, parent, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromParentChildren", exe, parent, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromParentChildren indicates an expected call of DeleteFromParentChildren.
func (mr *MockGitHelperMockRecorder) DeleteFromParentChildren(exe, parent, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromParentChildren", reflect.TypeOf((*MockGitHelper)(nil).DeleteFromParentChildren), exe, parent, branch)
}

// DeleteParent mocks base method.
func (m *MockGitHelper) DeleteParent(exe executor.Executor, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteParent", exe, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteParent indicates an expected call of DeleteParent.
func (mr *MockGitHelperMockRecorder) DeleteParent(exe, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParent", reflect.TypeOf((*MockGitHelper)(nil).DeleteParent), exe, branch)
}

// EnsureGitRepository mocks base method.
func (m *MockGitHelper) EnsureGitRepository(exe executor.Executor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureGitRepository", exe)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureGitRepository indicates an expected call of EnsureGitRepository.
func (mr *MockGitHelperMockRecorder) EnsureGitRepository(exe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureGitRepository", reflect.TypeOf((*MockGitHelper)(nil).EnsureGitRepository), exe)
}

// GetBranches mocks base method.
func (m *MockGitHelper) GetBranches(exe executor.Executor) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranches", exe)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranches indicates an expected call of GetBranches.
func (mr *MockGitHelperMockRecorder) GetBranches(exe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranches", reflect.TypeOf((*MockGitHelper)(nil).GetBranches), exe)
}

// GetChildren mocks base method.
func (m *MockGitHelper) GetChildren(exe executor.Executor, branch string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildren", exe, branch)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetChildren indicates an expected call of GetChildren.
func (mr *MockGitHelperMockRecorder) GetChildren(exe, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildren", reflect.TypeOf((*MockGitHelper)(nil).GetChildren), exe, branch)
}

// GetCurrentBranchName mocks base method.
func (m *MockGitHelper) GetCurrentBranchName(exe executor.Executor) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBranchName", exe)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBranchName indicates an expected call of GetCurrentBranchName.
func (mr *MockGitHelperMockRecorder) GetCurrentBranchName(exe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBranchName", reflect.TypeOf((*MockGitHelper)(nil).GetCurrentBranchName), exe)
}

// GetGitRoot mocks base method.
func (m *MockGitHelper) GetGitRoot(exe executor.Executor) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRoot", exe)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRoot indicates an expected call of GetGitRoot.
func (mr *MockGitHelperMockRecorder) GetGitRoot(exe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRoot", reflect.TypeOf((*MockGitHelper)(nil).GetGitRoot), exe)
}

// GetParent mocks base method.
func (m *MockGitHelper) GetParent(exe executor.Executor, branch string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParent", exe, branch)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetParent indicates an expected call of GetParent.
func (mr *MockGitHelperMockRecorder) GetParent(exe, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParent", reflect.TypeOf((*MockGitHelper)(nil).GetParent), exe, branch)
}

// IsGitRepository mocks base method.
func (m *MockGitHelper) IsGitRepository(exe executor.Executor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGitRepository", exe)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsGitRepository indicates an expected call of IsGitRepository.
func (mr *MockGitHelperMockRecorder) IsGitRepository(exe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGitRepository", reflect.TypeOf((*MockGitHelper)(nil).IsGitRepository), exe)
}

// IsProtectedBranch mocks base method.
func (m *MockGitHelper) IsProtectedBranch(branch string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProtectedBranch", branch)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProtectedBranch indicates an expected call of IsProtectedBranch.
func (mr *MockGitHelperMockRecorder) IsProtectedBranch(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProtectedBranch", reflect.TypeOf((*MockGitHelper)(nil).IsProtectedBranch), branch)
}

// SetChildren mocks base method.
func (m *MockGitHelper) SetChildren(exe executor.Executor, parent, children string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChildren", exe, parent, children)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChildren indicates an expected call of SetChildren.
func (mr *MockGitHelperMockRecorder) SetChildren(exe, parent, children interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChildren", reflect.TypeOf((*MockGitHelper)(nil).SetChildren), exe, parent, children)
}

// SetParent mocks base method.
func (m *MockGitHelper) SetParent(exe executor.Executor, parent, child string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetParent", exe, parent, child)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetParent indicates an expected call of SetParent.
func (mr *MockGitHelperMockRecorder) SetParent(exe, parent, child interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParent", reflect.TypeOf((*MockGitHelper)(nil).SetParent), exe, parent, child)
}
