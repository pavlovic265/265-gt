name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-release-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-release-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.4.0
        
    - name: Add golangci-lint to PATH
      run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
    - name: Run linting
      run: make lint
      
    - name: Run tests
      run: go test -v ./...
      
    - name: Build
      run: make build

    - name: Install GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: "~> v2"
        install-only: true

    - name: GoReleaser config check
      run: goreleaser check --config .goreleaser.yaml

    - name: Dry run (snapshot, no publish)
      run: goreleaser release --snapshot --clean --skip=publish

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: "~> v2"
        args: release --clean --config .goreleaser.yaml
      env:
        GITHUB_TOKEN: ${{ secrets.MY_RELEASE_PAT }}

    - name: Upload dist on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: dist-failed
        path: dist/**

    - name: Cleanup tag & release on failure
      if: failure()
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "Cleaning up $TAG due to failure"
        gh release delete "$TAG" -y || true
        git push origin --delete "$TAG" || true
      env:
        GH_TOKEN: ${{ secrets.MY_RELEASE_PAT }}
